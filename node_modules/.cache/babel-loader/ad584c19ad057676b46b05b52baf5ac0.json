{"ast":null,"code":"var _jsxFileName = \"D:\\\\SmartTest\\\\FrontSmart\\\\smartgrid-test\\\\src\\\\components\\\\PersonForm.jsx\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { PersonContext } from '../contexts/PersonContext';\nimport { Dialog } from \"primereact/dialog\";\nimport { Button } from \"primereact/button\";\nimport { Dropdown } from \"primereact/dropdown\";\nimport { InputText } from \"primereact/inputtext\";\n\nconst PersonForm = props => {\n  const {\n    isVisible,\n    setIsVisible\n  } = props;\n  const {\n    createPerson,\n    updatePerson,\n    editPerson,\n    personTypes\n  } = useContext(PersonContext);\n  const initialPersonState = {\n    id: null,\n    name: \"\",\n    age: 0,\n    personTypeId: editPerson != null ? editPerson.personTypeId : 0\n  };\n  const [personData, setPersonData] = useState(initialPersonState);\n  const [typeSelected, setTypeSelected] = useState();\n  useEffect(() => {\n    if (editPerson) setPersonData(editPerson);\n  }, [editPerson]);\n\n  const updateField = (data, field) => {\n    if (field == \"personTypeId\") {\n      setTypeSelected(data);\n    }\n\n    setPersonData({ ...personData,\n      [field]: data\n    });\n  };\n\n  const savePerson = () => {\n    if (!editPerson) {\n      if (personData.personTypeId != null && personData.personTypeId != 0) {\n        createPerson(personData);\n      }\n    } else {\n      updatePerson(personData);\n    }\n\n    setPersonData(initialPersonState);\n    setIsVisible(false);\n  };\n\n  const dialogFooter = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui-dialog-buttonpane p-clearfix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: personData.id != null ? \"Edit\" : \"Save\",\n    icon: \"pi pi-check\",\n    onClick: savePerson,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }));\n\n  const clearSelected = () => {\n    setIsVisible(false);\n    setPersonData(initialPersonState);\n    setTypeSelected(0);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    visible: isVisible,\n    modal: true,\n    style: {\n      width: \"420px\"\n    },\n    contentStyle: {\n      overflow: \"visible\"\n    },\n    header: \"Person Details\",\n    onHide: () => clearSelected(),\n    footer: dialogFooter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid p-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    value: personData.name,\n    onChange: e => updateField(e.target.value.trim(), \"name\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }, \"Name:\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    value: personData.age,\n    onChange: e => updateField(e.target.value.trim(), \"age\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, \"Age:\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    optionLabel: \"description\",\n    optionValue: \"id\",\n    value: personData.personTypeId,\n    options: personTypes,\n    onChange: e => updateField(e.target.value, \"personTypeId\"),\n    placeholder: \"Select a Person Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default PersonForm;","map":{"version":3,"sources":["D:/SmartTest/FrontSmart/smartgrid-test/src/components/PersonForm.jsx"],"names":["React","useContext","useState","useEffect","PersonContext","Dialog","Button","Dropdown","InputText","PersonForm","props","isVisible","setIsVisible","createPerson","updatePerson","editPerson","personTypes","initialPersonState","id","name","age","personTypeId","personData","setPersonData","typeSelected","setTypeSelected","updateField","data","field","savePerson","dialogFooter","clearSelected","width","overflow","e","target","value","trim"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { PersonContext } from '../contexts/PersonContext';\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Button } from \"primereact/button\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\n\r\n\r\nconst PersonForm = (props) => {\r\n\r\n    const { isVisible, setIsVisible } = props;\r\n\r\n    const {\r\n        createPerson,\r\n        updatePerson,\r\n        editPerson,\r\n        personTypes\r\n    } = useContext(PersonContext)\r\n\r\n    const initialPersonState = {\r\n        id: null,\r\n        name: \"\",\r\n        age: 0,\r\n        personTypeId: editPerson != null ? editPerson.personTypeId : 0\r\n    };\r\n\r\n\r\n    const [personData, setPersonData] = useState(initialPersonState);\r\n\r\n    const [typeSelected, setTypeSelected] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        if (editPerson) setPersonData(editPerson);\r\n    }, [editPerson]);\r\n\r\n\r\n    const updateField = (data, field) => {\r\n        if (field == \"personTypeId\") {\r\n            setTypeSelected(data);\r\n        }\r\n        setPersonData({\r\n            ...personData,\r\n            [field]: data,\r\n        });\r\n    };\r\n\r\n    const savePerson = () => {\r\n        if (!editPerson) {\r\n            if (personData.personTypeId != null && personData.personTypeId !=0) {\r\n                createPerson(personData);\r\n            }\r\n        } else {\r\n            updatePerson(personData);\r\n        }\r\n        setPersonData(initialPersonState);\r\n        setIsVisible(false);\r\n    };\r\n\r\n    const dialogFooter =\r\n        <div className=\"ui-dialog-buttonpane p-clearfix\">\r\n            <Button label={personData.id != null ? \"Edit\" : \"Save\"} icon=\"pi pi-check\" onClick={savePerson} />\r\n        </div>\r\n\r\n    const clearSelected = () => {\r\n        setIsVisible(false);\r\n        setPersonData(initialPersonState);\r\n        setTypeSelected(0)\r\n    };\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Dialog\r\n                visible={isVisible}\r\n                modal={true}\r\n                style={{ width: \"420px\" }}\r\n                contentStyle={{ overflow: \"visible\" }}\r\n                header=\"Person Details\"\r\n                onHide={() => clearSelected()}\r\n                footer={dialogFooter}\r\n            >\r\n                <div className=\"p-grid p-fluid\">\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        <InputText\r\n                            value={personData.name}\r\n                            onChange={(e) => updateField(e.target.value.trim(), \"name\")}\r\n                        />\r\n                        <label>Name:</label>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        <InputText\r\n                            value={personData.age}\r\n                            onChange={(e) => updateField(e.target.value.trim(), \"age\")}\r\n                        />\r\n                        <label>Age:</label>\r\n                    </div>\r\n                    <br />\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        {/* <InputText\r\n                            value={personData.personTypeId}\r\n                            onChange={(e) => updateField(e.target.value.trim(), \"personTypeId\")}\r\n                        /> */}\r\n                        <Dropdown optionLabel=\"description\" optionValue=\"id\" value={personData.personTypeId} options={personTypes} onChange={(e) => updateField(e.target.value, \"personTypeId\")} placeholder=\"Select a Person Type\" />\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </Dialog>\r\n\r\n        </div>);\r\n}\r\n\r\nexport default PersonForm;"]},"metadata":{},"sourceType":"module"}