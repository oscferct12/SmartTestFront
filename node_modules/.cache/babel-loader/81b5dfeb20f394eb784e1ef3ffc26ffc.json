{"ast":null,"code":"var _jsxFileName = \"D:\\\\SmartTest\\\\FrontSmart\\\\smartgrid-test\\\\src\\\\components\\\\PersonForm.jsx\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport { PersonContext } from '../contexts/PersonContext';\nimport { Dialog } from \"primereact/dialog\";\nimport { Button } from \"primereact/button\";\nimport { InputText } from \"primereact/inputtext\";\nimport { InputNumber } from \"primereact/inputnumber\";\nimport { Dropdown } from 'primereact/dropdown';\n\nconst PersonForm = props => {\n  const {\n    isVisible,\n    setIsVisible\n  } = props;\n  const {\n    createPerson,\n    deletePerson,\n    updatePerson,\n    editPerson,\n    personTypes\n  } = useContext(PersonContext);\n  const [personData, setPersonData] = useState(initialPersonState);\n  const [selectedType, setSelectedType] = useState();\n  useEffect(() => {\n    if (editPerson) setPersonData(editPerson);\n  }, [editPerson]);\n\n  const updateField = (data, field) => {\n    if (field == \"personTypeId\") {\n      setSelectedType(selectedType, data);\n    }\n\n    setPersonData({ ...personData,\n      [field]: data\n    });\n    console.log(personData);\n  };\n\n  const _deletePerson = () => {\n    if (editPerson) {\n      deletePerson(personData.id);\n      setPersonData(initialPersonState);\n    }\n\n    setIsVisible(false);\n  };\n\n  const savePerson = () => {\n    if (!editPerson) {\n      createPerson(personData);\n    } else {\n      updatePerson(personData);\n    }\n\n    setPersonData(initialPersonState);\n    setIsVisible(false);\n  };\n\n  const dialogFooter = personData.id != null ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui-dialog-buttonpane p-clearfix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Delete\",\n    icon: \"pi pi-times\",\n    onClick: _deletePerson,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    icon: \"pi pi-check\",\n    onClick: savePerson,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui-dialog-buttonpane p-clearfix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    label: \"Save\",\n    icon: \"pi pi-check\",\n    onClick: savePerson,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }));\n\n  const clearSelected = () => {\n    setIsVisible(false);\n    setPersonData(initialPersonState);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    visible: isVisible,\n    modal: true,\n    style: {\n      width: \"420px\"\n    },\n    contentStyle: {\n      overflow: \"visible\"\n    },\n    header: \"Person Details\",\n    onHide: () => clearSelected(),\n    footer: dialogFooter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-grid p-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    value: personData.name,\n    onChange: e => updateField(e.target.value.trim(), \"name\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 25\n    }\n  }, \"Name:\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    value: personData.age,\n    onChange: e => updateField(e.target.value.trim(), \"age\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \"Age:\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-float-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    optionLabel: \"description\",\n    value: selectedType,\n    options: personTypes,\n    onChange: e => updateField(e.target.value, \"personTypeId\"),\n    placeholder: \"Select a Person Type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default PersonForm;","map":{"version":3,"sources":["D:/SmartTest/FrontSmart/smartgrid-test/src/components/PersonForm.jsx"],"names":["React","useContext","useState","useEffect","PersonContext","Dialog","Button","InputText","InputNumber","Dropdown","PersonForm","props","isVisible","setIsVisible","createPerson","deletePerson","updatePerson","editPerson","personTypes","personData","setPersonData","initialPersonState","selectedType","setSelectedType","updateField","data","field","console","log","_deletePerson","id","savePerson","dialogFooter","clearSelected","width","overflow","name","e","target","value","trim","age"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\r\nimport { PersonContext } from '../contexts/PersonContext';\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Button } from \"primereact/button\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { InputNumber } from \"primereact/inputnumber\";\r\nimport { Dropdown } from 'primereact/dropdown';\r\n\r\nconst PersonForm = (props) => {\r\n\r\n    const { isVisible, setIsVisible } = props;\r\n\r\n    const {\r\n        createPerson,\r\n        deletePerson,\r\n        updatePerson,\r\n        editPerson,\r\n        personTypes\r\n    } = useContext(PersonContext)\r\n\r\n\r\n\r\n    const [personData, setPersonData] = useState(initialPersonState);\r\n    const [selectedType, setSelectedType] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        if (editPerson) setPersonData(editPerson);\r\n    }, [editPerson]);\r\n\r\n\r\n    const updateField = (data, field) => {\r\n        if (field == \"personTypeId\") {\r\n            setSelectedType(selectedType, data)\r\n        }\r\n        setPersonData({\r\n            ...personData,\r\n            [field]: data,\r\n        });\r\n\r\n        console.log(personData);\r\n    };\r\n\r\n    const _deletePerson = () => {\r\n        if (editPerson) {\r\n            deletePerson(personData.id);\r\n            setPersonData(initialPersonState);\r\n        }\r\n        setIsVisible(false);\r\n    };\r\n\r\n    const savePerson = () => {\r\n        if (!editPerson) {\r\n            createPerson(personData);\r\n        } else {\r\n            updatePerson(personData);\r\n        }\r\n        setPersonData(initialPersonState);\r\n        setIsVisible(false);\r\n    };\r\n\r\n    const dialogFooter =\r\n        personData.id != null\r\n            ?\r\n            <div className=\"ui-dialog-buttonpane p-clearfix\">\r\n                <Button label=\"Delete\" icon=\"pi pi-times\" onClick={_deletePerson} />\r\n                <Button label=\"Save\" icon=\"pi pi-check\" onClick={savePerson} />\r\n            </div> :\r\n            <div className=\"ui-dialog-buttonpane p-clearfix\">\r\n                <Button label=\"Save\" icon=\"pi pi-check\" onClick={savePerson} />\r\n            </div>\r\n\r\n    const clearSelected = () => {\r\n        setIsVisible(false);\r\n        setPersonData(initialPersonState);\r\n    };\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Dialog\r\n                visible={isVisible}\r\n                modal={true}\r\n                style={{ width: \"420px\" }}\r\n                contentStyle={{ overflow: \"visible\" }}\r\n                header=\"Person Details\"\r\n                onHide={() => clearSelected()}\r\n                footer={dialogFooter}\r\n            >\r\n                <div className=\"p-grid p-fluid\">\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        <InputText\r\n                            value={personData.name}\r\n                            onChange={(e) => updateField(e.target.value.trim(), \"name\")}\r\n                        />\r\n                        <label>Name:</label>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        <InputText\r\n                            value={personData.age}\r\n                            onChange={(e) => updateField(e.target.value.trim(), \"age\")}\r\n                        />\r\n                        <label>Age:</label>\r\n                    </div>\r\n                    <br />\r\n                    <div className=\"p-float-label\">\r\n                        <Dropdown optionLabel=\"description\" value={selectedType} options={personTypes} onChange={(e) => updateField(e.target.value, \"personTypeId\")} placeholder=\"Select a Person Type\" />\r\n                    </div>\r\n                    <br />\r\n                </div>\r\n            </Dialog>\r\n\r\n        </div>);\r\n}\r\n\r\nexport default PersonForm;"]},"metadata":{},"sourceType":"module"}