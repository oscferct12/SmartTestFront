{"ast":null,"code":"var _jsxFileName = \"D:\\\\SmartTest\\\\FrontSmart\\\\smartgrid-test\\\\src\\\\contexts\\\\PersonContext.jsx\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { PersonService } from \"../services/PersonService\";\nexport const PersonContext = createContext();\n\nconst PersonContextProvider = props => {\n  const personService = new PersonService();\n  const [personTypes, setPersonTypes] = useState([]);\n  const [persons, setPersons] = useState([]);\n  const [editPerson, setEditPerson] = useState(null);\n  useEffect(() => {\n    personService.getPersons().then(data => setPersons(data.data));\n  }, []);\n  useEffect(() => {\n    personService.getPersonTypes().then(data => setPersonTypes(data.data));\n  }, []);\n\n  const createPerson = person => {\n    personService.createPerson(person).then(data => setPersons([...persons, data]));\n  };\n\n  const deletePerson = personid => {\n    personService.deletePerson(personid).then(bool => bool ? setPersons(persons.filter(p => p.id !== personid)) : \"\");\n  };\n\n  const updatePerson = person => {\n    personService.updatePerson(person).then(data => setPersons(persons.map(p => p.id === person.id ? data.data : person)));\n    setEditPerson(null);\n  };\n\n  const findPerson = id => {\n    const person = persons.find(p => p.id === id);\n    setEditPerson(person);\n  };\n\n  return /*#__PURE__*/React.createElement(PersonContext.Provider, {\n    value: {\n      createPerson,\n      deletePerson,\n      updatePerson,\n      findPerson,\n      editPerson,\n      persons,\n      personTypes\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default PersonContextProvider;","map":{"version":3,"sources":["D:/SmartTest/FrontSmart/smartgrid-test/src/contexts/PersonContext.jsx"],"names":["React","createContext","useState","useEffect","PersonService","PersonContext","PersonContextProvider","props","personService","personTypes","setPersonTypes","persons","setPersons","editPerson","setEditPerson","getPersons","then","data","getPersonTypes","createPerson","person","deletePerson","personid","bool","filter","p","id","updatePerson","map","findPerson","find","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAEA,OAAO,MAAMC,aAAa,GAAGJ,aAAa,EAAnC;;AAEP,MAAMK,qBAAqB,GAAIC,KAAD,IAAW;AAEvC,QAAMC,aAAa,GAAG,IAAIJ,aAAJ,EAAtB;AAEA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,IAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa,CAACO,UAAd,GAA2BC,IAA3B,CAAgCC,IAAI,IAAIL,UAAU,CAACK,IAAI,CAACA,IAAN,CAAlD;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa,CAACU,cAAd,GAA+BF,IAA/B,CAAoCC,IAAI,IAAIP,cAAc,CAACO,IAAI,CAACA,IAAN,CAA1D;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAME,YAAY,GAAIC,MAAD,IAAY;AAC/BZ,IAAAA,aAAa,CAACW,YAAd,CAA2BC,MAA3B,EAAmCJ,IAAnC,CAAyCC,IAAD,IAAUL,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaM,IAAb,CAAD,CAA5D;AACD,GAFD;;AAIA,QAAMI,YAAY,GAAIC,QAAD,IAAc;AACjCd,IAAAA,aAAa,CAACa,YAAd,CAA2BC,QAA3B,EAAqCN,IAArC,CAA2CO,IAAD,IAAUA,IAAI,GAAGX,UAAU,CAACD,OAAO,CAACa,MAAR,CAAgBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,QAA/B,CAAD,CAAb,GAA0D,EAAlH;AACD,GAFD;;AAIA,QAAMK,YAAY,GAAIP,MAAD,IAAY;AAC/BZ,IAAAA,aAAa,CAACmB,YAAd,CAA2BP,MAA3B,EAAmCJ,IAAnC,CAAyCC,IAAD,IAAUL,UAAU,CAACD,OAAO,CAACiB,GAAR,CAAYH,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACM,EAAhB,GAAqBT,IAAI,CAACA,IAA1B,GAAiCG,MAAlD,CAAD,CAA5D;AACAN,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAKA,QAAMe,UAAU,GAAIH,EAAD,IAAQ;AACzB,UAAMN,MAAM,GAAGT,OAAO,CAACmB,IAAR,CAAcL,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASA,EAA7B,CAAf;AACAZ,IAAAA,aAAa,CAACM,MAAD,CAAb;AACD,GAHD;;AAKA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,YADK;AAELE,MAAAA,YAFK;AAGLM,MAAAA,YAHK;AAILE,MAAAA,UAJK;AAKLhB,MAAAA,UALK;AAMLF,MAAAA,OANK;AAOLF,MAAAA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGF,KAAK,CAACwB,QAXT,CADF;AAeD,CAnDD;;AAqDA,eAAezB,qBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\nimport { PersonService } from \"../services/PersonService\";\r\n\r\nexport const PersonContext = createContext();\r\n\r\nconst PersonContextProvider = (props) => {\r\n\r\n  const personService = new PersonService();\r\n\r\n  const [personTypes, setPersonTypes] = useState([]);\r\n\r\n  const [persons, setPersons] = useState([]);\r\n  \r\n  const [editPerson, setEditPerson] = useState(null);\r\n\r\n  useEffect(() => {\r\n    personService.getPersons().then(data => setPersons(data.data))\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    personService.getPersonTypes().then(data => setPersonTypes(data.data))\r\n  }, []);\r\n\r\n  const createPerson = (person) => {\r\n    personService.createPerson(person).then((data) => setPersons([...persons, data]));\r\n  };\r\n\r\n  const deletePerson = (personid) => {\r\n    personService.deletePerson(personid).then((bool) => bool ? setPersons(persons.filter((p) => p.id !== personid)) : \"\");\r\n  };\r\n\r\n  const updatePerson = (person) => {\r\n    personService.updatePerson(person).then((data) => setPersons(persons.map(p => p.id === person.id ? data.data : person)));\r\n    setEditPerson(null);\r\n  };\r\n\r\n  const findPerson = (id) => {\r\n    const person = persons.find((p) => p.id === id);\r\n    setEditPerson(person);\r\n  };\r\n\r\n  return (\r\n    <PersonContext.Provider\r\n      value={{\r\n        createPerson,\r\n        deletePerson,\r\n        updatePerson,\r\n        findPerson,\r\n        editPerson,\r\n        persons,\r\n        personTypes\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PersonContext.Provider>\r\n  );\r\n}\r\n\r\nexport default PersonContextProvider;"]},"metadata":{},"sourceType":"module"}